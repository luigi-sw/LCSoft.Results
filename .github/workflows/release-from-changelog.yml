name: Release from Changelog

on:
  push:
    branches:
      - main
    paths:
      - CHANGELOG.md

  workflow_dispatch:
    inputs:
      test_release:
        description: 'Create test release (prerelease tag)'
        required: false
        default: false
        type: boolean
      version_override:
        description: 'Override version (optional, e.g., 0.2.0-alpha.1)'
        required: false
        type: string

jobs:
  release:
    name: Create Release from CHANGELOG
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine release type
        id: release_type
        run: |
          if [ "${{ github.event.inputs.test_release }}" == "true" ]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "draft=false" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "draft=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Set version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version_override }}" ]; then
            VERSION="${{ github.event.inputs.version_override }}"
            echo "Using override version: $VERSION"
          else
            # Extract version from CHANGELOG.md
            VERSION=$(grep -m1 -Po '^## \[\K[^\]]+' CHANGELOG.md)
            echo "Using changelog version: $VERSION"
          fi

      - name: Extract latest version and changelog section
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          
          # Extract all lines before the first '## [' (intro section)
          awk '!/^## \[/' CHANGELOG.md > _intro.txt

          if [ -n "${{ github.event.inputs.version_override }}" ]; then
            echo "Manual release - creating simple changelog entry"
            {
              echo "### Changes"
              echo "- Manual release of version $VERSION"
              if [ "${{ github.event.inputs.test_release }}" == "true" ]; then
                echo "- This is a test/prerelease version"
              fi
            } > _section.txt
          else
            # Extract changelog notes for the version from CHANGELOG.md
            if grep -q "## \[$VERSION\]" CHANGELOG.md; then
              echo "Found changelog section for version $VERSION"
              awk "/## \[$VERSION\]/,/^## \[/" CHANGELOG.md | head -n -1 | tail -n +2 > _section.txt
            else
              echo "No changelog section found for version $VERSION"
              echo "- No changelog entries found for this version" > _section.txt
            fi
          fi
              
          # Combine everything into final body
          {
            echo "## Release Notes"
            echo ""
            cat _intro.txt
            echo ""
            cat _section.txt
            echo ""
            echo "---"
            echo "[Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)"
          } > final_body.txt

          echo "BODY<<EOF" >> $GITHUB_OUTPUT
          cat final_body.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        id: tagcheck
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          TAG="v$VERSION"
          
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG"; then
            echo "Tag $TAG already exists."
            if [ "${{ github.event.inputs.test_release }}" == "true" ]; then
              echo "Test release - will skip creation"
              echo "EXISTS=true" >> $GITHUB_OUTPUT
            else
              echo "Production release - tag conflict!"
              echo "EXISTS=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "Tag $TAG does not exist. Proceeding with release."
            echo "EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Git Tag
        if: steps.tagcheck.outputs.EXISTS == 'false'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag -a "v${{ steps.changelog.outputs.VERSION }}" -m "Release v${{ steps.changelog.outputs.VERSION }}"
          git push origin "v${{ steps.changelog.outputs.VERSION }}"

      - name: Create GitHub Release
        if: steps.tagcheck.outputs.EXISTS == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.changelog.outputs.VERSION }}
          name: v${{ steps.changelog.outputs.VERSION }}
          body: ${{ steps.changelog.outputs.BODY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
